// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../../contracts/Comet.sol";
import "../../contracts/CometConfiguration.sol";
import "../../contracts/liquidator/LiquidatorV2.sol";
// import "../CometInterface.sol";

interface WBTC {
    function owner() external returns (address);
    function mint(address _to, uint256 _amount) external returns (bool);
}

// https://ethereum.stackexchange.com/questions/39989/solidity-convert-hex-string-to-bytes
// Convert an hexadecimal character to their value
function fromHexChar(uint8 c) pure returns (uint8) {
    if (bytes1(c) >= bytes1('0') && bytes1(c) <= bytes1('9')) {
        return c - uint8(bytes1('0'));
    }
    if (bytes1(c) >= bytes1('a') && bytes1(c) <= bytes1('f')) {
        return 10 + c - uint8(bytes1('a'));
    }
    if (bytes1(c) >= bytes1('A') && bytes1(c) <= bytes1('F')) {
        return 10 + c - uint8(bytes1('A'));
    }
    revert("fromHexChar fail");
}

// Convert an hexadecimal string to raw bytes
function fromHex(string memory s) pure returns (bytes memory) {
    bytes memory ss = bytes(s);
    require(ss.length%2 == 0); // length must be even
    bytes memory r = new bytes(ss.length/2);
    for (uint i=0; i<ss.length/2; ++i) {
        r[i] = bytes1(fromHexChar(uint8(ss[2*i])) * 16 +
                    fromHexChar(uint8(ss[2*i+1])));
    }
    return r;
}

contract LiquidationBotV2Test is Test {
    // Comet public comet;
    LiquidatorV2 public liquidator;
    // address[] public assets;
    // uint256[] public assetBaseAmounts;
    // address[] public swapTargets;
    // bytes[] public swapTransactions;

    function setUp() public {
        liquidator = new LiquidatorV2(
            CometInterface(0xc3d688B66703497DAA19211EEdff47f25384cdc3), // comet
            address(0x1F98431c8aD98523631AE4a59f267346ea31F984), // uniswap v3 factory
            address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2), // weth9
            address(0x5a13D329A193ca3B1fE2d7B459097EdDba14C28F) // recipient
        );

        vm.label(0xc3d688B66703497DAA19211EEdff47f25384cdc3, "Comet");

        vm.label(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, "WBTC");
        vm.label(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, "WETH9");
        vm.label(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, "USDC"); // XXX double check
        vm.label(0x6B175474E89094C44Da98b954EedeAC495271d0F, "DAI");

        // assets.push(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);
        // // assetBaseAmounts.push(1986564972441);
        // swapTargets.push(0x1111111254EEB25477B68fb85Ed929f73A960582);

        // bytes memory tx = fromHex("12aa3caf0000000000000000000000003b17056cc4439c61cea41fe1c9f517af75a978f70000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000003b17056cc4439c61cea41fe1c9f517af75a978f7000000000000000000000000ce71065d4017f316ec606fe4422e11eb2c47c24600000000000000000000000000000000000000000000000000000002cb417800000000000000000000000000000000000000000000000000000001cdc7fcec1300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000af719cae18e70c5b22063f7bc6ba70c04dd23aa4dd7d9dfd6cbd42b59aee968b056b132b54e297f950a2f2cead0732646e9eb2771291606c34652138dbafb1b43d5000000000000000000000000000000000000000a99000a6b000a21000a0700a0c9e75c48000000000000000008020000000000000000000000000000000000000000000000000009d90002d700a0c9e75c4800000000000000002c060000000000000000000000000000000000000000000000000002a900004f02a00000000000000000000000000000000000000000000000000000000b13f4cb30ee63c1e50199ac8ca7087fa4a2a1fb6357269965a2014abc352260fac5e5542a773aa44fbcfedf7c193bc2c59900a007e5c0d20000000000000000000000000000000000000002360001860000ca0000b051207fc77b5c7614e1533320ea6ddc2eb61fa00a97142260fac5e5542a773aa44fbcfedf7c193bc2c59900443df0212400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010020d6bdbf78fe18be6b3bd88a2d2a7f928d00292e7a9963cfc64120c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f002444b3e92373425443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000735553440000000000000000000000000000000000000000000000000000000031494e434800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005120a5407eae9ba41422680e2e00537571bcc53efbfd57ab1ec28d129707052df4df418d58a2d46d5f5100443df02124000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100a007e5c0d20000000000000000000000000000000000000000000000000006de0001e000a0c9e75c480000000000001613ff090000000000000000000000000000000000000001b20001630001140000fa00a007e5c0d20000000000000000000000000000000000000000000000000000d60000d05100d51a44d3fae010294c616388b506acda1bfaae462260fac5e5542a773aa44fbcfedf7c193bc2c5990044394747c500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c2b53b462c61e69f7000000000000000000000000000000000000000000000000000000000000000100206b4be0b94041c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2d0e30db002a0000000000000000000000000000000000000000000000019aa45f5f078cea7f7ee63c1e501cbcdf9626bc03e24f779434178a73a0b4bad62ed2260fac5e5542a773aa44fbcfedf7c193bc2c59902a000000000000000000000000000000000000000000000001dbf2f3e4cf70b9aa7ee63c1e5014585fe77225b41b697c938b018e2ac67ac5a20c02260fac5e5542a773aa44fbcfedf7c193bc2c59900a0c9e75c48000000000000151206050000000000000000000000000000000000000004d000048100026800004f02a000000000000000000000000000000000000000000000000000000024efcb9edbee63c1e5008ad599c3a0ff1de082011efddc58f1908eb6e6d8c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200a0860a32ec0000000000000000000000000000000000000000000000084676a4524fc080000001f051001111111254fb6c44bac0bed2854e76f90643097dc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20124d0a3b665000000000000000000000000000000000000000063893a7700000184c45cf7ac000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000af0b0000f0210d0f421f0009c72406703b50506b0000000000000000000000003b17056cc4439c61cea41fe1c9f517af75a978f70000000000000000000000000000000000000000000000000000002d380266020000000000000000000000000000000000000000000000084676a4524fc0800000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000411cf04ad99c838d80ddf900d3450511fb738b63037fad51d9b30b9638c4367b792639dceea8f9efed847d9e75014c5e174cf0254090f35119ba09a96d6760338f0b0000000000000000000000000000000000000000000000000000000000000000a0860a32ec000000000000000000000000000000000000000000000018d363ecf6ef413a2c0001f051001111111254fb6c44bac0bed2854e76f90643097dc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20124d0a3b665000000000000000000000000000000000000000063893a9700000184d00b096f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000945bcf562085de2d5875b9e2012ed5fd5cfab9270000000000000000000000003b17056cc4439c61cea41fe1c9f517af75a978f700000000000000000000000000000000000000000000000000000087a19cb417000000000000000000000000000000000000000000000018d363ecf6ef413a2c00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000419f1ba10d2c53228bfda414d7cf176d75e9729e90a0d35031cbc55cdc0916975d1865405197668556f5306f9bad78a92ad10ef5b59d074110ab3ba8103fa326e31b0000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000009b3216e711ee63c1e50088e6a0c2ddd26feeb64f039a2c41296fcb3f5640c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20020d6bdbf78a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800a0f2fa6b66a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000001d7348f2524000000000000000000000000004c4d5480a06c4eca27a0b86991c6218b36c1d19d4a2e9eb0ce3606eb481111111254eeb25477b68fb85ed929f73a960582000000000000000000cfee7c08");
        // swapTransactions.push(tx);
    }

    // function testOne() public {
    //     uint256 a = 41;
    //     uint256 b = 42;
    //     assertEq(a, b);
    // }

    // string[] memory inputs = new string[](4);
    // inputs[0] = "yarn";
    // inputs[1] = "-s";
    // inputs[2] = "ts-node";
    // inputs[3] = "forge/scripts/get-1inch-swap.ts";

    // bytes memory res = vm.ffi(inputs);
    // console.log(string(res));
    // assertEq(res, "get 1inch swap");

    function testTwo() public {
        address wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;
        address wbtcOwner = WBTC(wbtc).owner();

        vm.prank(wbtcOwner);
        WBTC(wbtc).mint(
            0xc3d688B66703497DAA19211EEdff47f25384cdc3, // XXX comet
            120e8
        );

        vm.label(0x1111111254EEB25477B68fb85Ed929f73A960582, "AggregationRouterV5");


        address[] memory liquidatableAccounts;

        (
            address[] memory returnedAssets,
            uint256[] memory returnedCollateralReserves,
            uint256[] memory returnedCollateralReservesInBase
        ) = liquidator.availableCollateral(liquidatableAccounts);

        for (uint8 i = 0; i < returnedAssets.length; i++) {
            console.log("loop: %s", i);
            console.log(returnedAssets[i]);
            console.log(returnedCollateralReserves[i]);
            console.log(returnedCollateralReservesInBase[i]);

            if (returnedCollateralReservesInBase[i] > 10e6) {

                string[] memory inputs = new string[](8);
                inputs[0] = "yarn";
                inputs[1] = "-s";
                inputs[2] = "ts-node";
                inputs[3] = "forge/scripts/get-1inch-swap.ts";
                inputs[4] = vm.toString(address(liquidator));
                inputs[5] = vm.toString(returnedAssets[i]);
                inputs[6] = vm.toString(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // comet base token
                inputs[7] = vm.toString(returnedCollateralReserves[i] - 1); //

                bytes memory res = vm.ffi(inputs);
                string memory resJson = string(res);

                address[] memory assets = new address[](1);
                assets[0] = returnedAssets[i];

                address[] memory swapTargets = new address[](1);
                swapTargets[0] = abi.decode(vm.parseJson(resJson, ".target"), (address));

                bytes[] memory swapTransactions = new bytes[](1);
                swapTransactions[0] = abi.decode(vm.parseJson(resJson, ".tx"), (bytes));

                liquidator.absorbAndArbitrage(
                    liquidatableAccounts, // empty list
                    assets, // assets,
                    swapTargets, // swapTargets,
                    swapTransactions // swapTransactions
                );

            }

        }

    }

    /*
    function test3

      send an amount of each token to the protocol

      get available collateral for each amount

      [wbtc, weth, comp, link] for each
        pass fromTokenAddress, amount to get-1inch-swap.ts
        pass swapTarget, swapTx to absorbAndArbitrage()

        assert that the absorb/arbitrage went through

    */

}
